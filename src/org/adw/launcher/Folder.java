/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.adw.launcher;


import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.adw.launcher.CellLayout.CellInfo;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

import com.dongji.adapter.AllAppAdapter;
import com.dongji.enity.SortEntity;
import com.dongji.launcher.R;
import com.dongji.sqlite.DButil;
import com.dongji.sqlite.DrawerDatabase;
import com.dongji.sqlite.MyDatabaseUtil;

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
public class Folder extends LinearLayout implements DragSource, OnItemLongClickListener,
        OnItemClickListener, OnClickListener, View.OnLongClickListener {

    protected AbsListView mContent;
    protected DragController mDragger;
    
    protected Launcher mLauncher;

//    protected Button mCloseButton;
    
    Button sort;
    LinearLayout deciphering;
    LinearLayout encryption;
    LinearLayout addapp;
    LinearLayout folderrename;
	LinearLayout appdelete;
	LinearLayout uninstall;
	LinearLayout appinfo;
	LinearLayout changeicon;
	LinearLayout apprename;
    EditText rename_et;
    Button submit;
    Button cancel;
    MyDatabaseUtil myDatabaseUtil = null;
    TextView name;
    TextView title;
//    Dialog dialog;
    PopupWindow folderPopupWindow;

    Context context;
    PopupWindow mPopupWindow;
	PopupWindow mSortPopupwindow;
    String UninstallPkg = null;
    ApplicationInfo appInfo = null;
    View contentView;
    protected FolderInfo mInfo;
    
    /**
     * Which item is being dragged
     */
    protected ApplicationInfo mDragItem;
    /**
     * ADW:Theme vars
     */
    private int mTextColor=0;
    private boolean useThemeTextColor=false;
    
    /**
     * Used to inflate the Workspace from XML.
     *
     * @param context The application's context.
     * @param attrs The attribtues set containing the Workspace's customization values.
     */
    public Folder(Context context, AttributeSet attrs) {
        super(context, attrs);
        this.context = context;
        setAlwaysDrawnWithCacheEnabled(false);
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
        myDatabaseUtil = DButil.getInstance(context);
        mContent = (AbsListView) findViewById(R.id.folder_content);
        mContent.setOnItemClickListener(this);
        mContent.setOnItemLongClickListener(this);
        
//        mCloseButton = (Button) findViewById(R.id.folder_close);
//        mCloseButton.setOnClickListener(this);
//        mCloseButton.setOnLongClickListener(this);
        
        sort = (Button) findViewById(R.id.sort);
        deciphering = (LinearLayout) findViewById(R.id.deciphering);
        encryption =  (LinearLayout) findViewById(R.id.encryption);
        addapp =  (LinearLayout) findViewById(R.id.addapp);
        folderrename =  (LinearLayout) findViewById(R.id.folderrename);
        
        title = (TextView) findViewById(R.id.title);
        
        UserFolderInfo user = (UserFolderInfo) Launcher.itemInfo;
    	String id = String.valueOf(user.id);
    	
    	title.setText(user.title);
    	
        if (myDatabaseUtil.isDeciphering(id)){
    		
    		deciphering.setVisibility(View.VISIBLE);
    		encryption.setVisibility(View.GONE);
    	} else {
    		
    		deciphering.setVisibility(View.GONE);
    		encryption.setVisibility(View.VISIBLE);
    	}
        
        sort.setOnClickListener(this);
        deciphering.setOnClickListener(this);
        encryption.setOnClickListener(this);
        addapp.setOnClickListener(this);
        folderrename.setOnClickListener(this);

    	//ADW: Load the specified theme
    	String themePackage=AlmostNexusSettingsHelper.getThemePackageName(getContext(), Launcher.THEME_DEFAULT);
    	PackageManager pm=getContext().getPackageManager();
    	Resources themeResources=null;
    	if(!themePackage.equals(Launcher.THEME_DEFAULT)){
	    	try {
				themeResources=pm.getResourcesForApplication(themePackage);
			} catch (NameNotFoundException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
    	}
		if(themeResources!=null){
			//Action Buttons
//			Launcher.loadThemeResource(themeResources,themePackage,"box_launcher_top",mCloseButton,Launcher.THEME_ITEM_BACKGROUND);
			Launcher.loadThemeResource(themeResources,themePackage,"box_launcher_bottom",mContent,Launcher.THEME_ITEM_BACKGROUND);
			int grid_selector_id=themeResources.getIdentifier("grid_selector", "drawable", themePackage);
			if(grid_selector_id!=0){
				mContent.setSelector(themeResources.getDrawable(grid_selector_id));
			}
			int textColorId=themeResources.getIdentifier("folder_title_color", "color", themePackage);
			if(textColorId!=0){
				mTextColor=themeResources.getColor(textColorId);
//				mCloseButton.setTextColor(mTextColor);
			}
			Typeface themeFont=null;
			try{
				themeFont=Typeface.createFromAsset(themeResources.getAssets(), "themefont.ttf");
			}catch (RuntimeException e) {
				// TODO: handle exception
			}
//			if(themeFont!=null)mCloseButton.setTypeface(themeFont);
		}
        
    }
    
    public void onItemClick(AdapterView parent, View v, int position, long id) {
        ApplicationInfo app = (ApplicationInfo) parent.getItemAtPosition(position);
		// set bound
		if (v != null) {
		    Rect targetRect = new Rect();
		    v.getGlobalVisibleRect(targetRect);
		    try{
		    	app.intent.setSourceBounds(targetRect);
		    }catch(NoSuchMethodError e){};
		}        
        mLauncher.startActivitySafely(app.intent);
        if (mLauncher.autoCloseFolder) {
            mLauncher.closeFolder(this);
        }
        mLauncher.clickInsertDB(app);
    }

    public void onClick(View v) {
    	
    	switch (v.getId()) {
    	
		case R.id.folder_close:
			mLauncher.closeFolder(this);
			break;
			
		case R.id.sort:
			showSortPopupwindow();
			break;
			
		case R.id.deciphering:
			
			mLauncher.decipheringDialog(v);
			
			break;
			
		case R.id.encryption:
			
			mLauncher.encryption(v);
			
			break;
			
		case R.id.addapp:
			
			UserFolderInfo userFolderInfo = (UserFolderInfo)mLauncher.itemInfo;
			
        	addAppToFolder(userFolderInfo);
			
			break;
			
		case R.id.folderrename:
			
        	mLauncher.renameDialog(v);
			
			break;
		
		case R.id.appdelete:
			
			UserFolderInfo info = (UserFolderInfo)mLauncher.itemInfo;
			mLauncher.getModel().removeUserFolderItem(info, appInfo);
			LauncherModel.deleteItemFromDatabase(mLauncher, appInfo);
			
			notifyDataSetChanged();
			View userView = null;

//			if(mLauncher.mAllDrawer.getVisibility()==View.VISIBLE) {
//				userView = mLauncher.mAllDrawer.drawerWorkspace.getViewForTag(info);
//			} else {
				userView = mLauncher.mWorkspace.getViewForTag(info);
//			}
			
			FolderIcon icon = (FolderIcon) userView;
			mLauncher.mCloseIcon = new BitmapDrawable(icon.creaetCloseIcon(info));
			((BubbleTextView)userView).setCompoundDrawablesWithIntrinsicBounds(null, mLauncher.mCloseIcon, null, null);
			
//			notifyDataSetChanged();
			
			if ( info.contents.size() == 0){
				CellLayout layout = (CellLayout) mLauncher.mWorkspace.getChildAt(mLauncher.mWorkspace.getCurrentScreen());
				mLauncher.getModel().deleteUserFolderContentsFromDatabase(context, info);
				
				layout.removeView(userView);
				layout.requestLayout();
				layout.invalidate();
				
			}
			
			break;
			
		case R.id.uninstall:
			try{
	            if(appInfo.iconResource != null)
					UninstallPkg = appInfo.iconResource.packageName;
				else
				{
					PackageManager mgr = context.getPackageManager();
					ResolveInfo res = mgr.resolveActivity(appInfo.intent, 0);
					UninstallPkg = res.activityInfo.packageName;
				}

			}catch (Exception e) {
				UninstallPkg=null;
			}
			
			Intent uninstallIntent = new Intent(Intent.ACTION_DELETE, Uri.parse("package:"+UninstallPkg));
			context.startActivity(uninstallIntent);
			
			mLauncher.overridePendingTransition(R.anim.enteralpha,R.anim.exitalpha);	
			
			notifyDataSetChanged();
			break;	
					
		case R.id.applictioninfo:
			
			try{
				PackageManager mgr = context.getPackageManager();
				ResolveInfo res = mgr.resolveActivity(appInfo.intent, 0);
				
				mLauncher.showInstalledAppDetails(context, res.activityInfo.packageName); 
				mLauncher.overridePendingTransition(R.anim.enteralpha,R.anim.exitalpha);
			}catch(Exception ex){
				ex.printStackTrace();
			}
			notifyDataSetChanged();
			break;
			
		case R.id.changeicon:
			
			Intent pickerIntent=new Intent(Intent.ACTION_PICK);
			pickerIntent.setType("image/*");
			mLauncher.folder_app_info = appInfo;
			mLauncher.contentView = contentView;
			mLauncher.startActivityForResult(Intent.createChooser(pickerIntent, "Select icon"), mLauncher.PHOTO_ICON);
			mLauncher.overridePendingTransition(R.anim.enteralpha,R.anim.exitalpha);
			notifyDataSetChanged();
			break;
			
		case R.id.rename:
			
			if (mPopupWindow != null && mPopupWindow.isShowing()) {
	    		mPopupWindow.dismiss();
	    	}
			
			LayoutInflater mLayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			View view = mLayoutInflater.inflate(R.layout.renamedialog,null);
			folderPopupWindow = new PopupWindow(view,LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT,true);
			folderPopupWindow.setBackgroundDrawable(new BitmapDrawable());
			folderPopupWindow.setOutsideTouchable(true);
			
			folderPopupWindow.setAnimationStyle(R.style.desktopPopupAnimation);
			folderPopupWindow.showAtLocation(apprename, Gravity.CENTER, 0, 0);
			((LinearLayout) view.findViewById(R.id.renamely)).setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					folderPopupWindow.dismiss();
				}
			});
			
			name = (TextView) view.findViewById(R.id.name);
			rename_et = (EditText) view.findViewById(R.id.rename);
			submit = (Button) view.findViewById(R.id.submit);
			cancel = (Button) view.findViewById(R.id.cancel);
			
			name.setText(appInfo.title);
			
			submit.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					
					if (!rename_et.getText().toString().equals("")){
						
						Intent mReturnData = new Intent();
				        mReturnData.putExtra(Intent.EXTRA_SHORTCUT_NAME, rename_et.getText().toString());
				        mReturnData.putExtra(mLauncher.EXTRA_APPLICATIONINFO, appInfo.id);
						mLauncher.setResult(-1,mReturnData);
						
						View view = contentView;
						appInfo.title = rename_et.getText().toString();
						((CounterTextView)view).setText(appInfo.title); 
						mLauncher.getModel().updateItemInDatabase(context,appInfo);
						
						dismissPopupwindow(folderPopupWindow);
					}else{
						Toast.makeText(context, "名称不能为空！", Toast.LENGTH_SHORT).show();
					}
					
				}
			});
			
			cancel.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					
					dismissPopupwindow(folderPopupWindow);
					
				}
			});
			
			break;
			
		case R.id.sort_letter_textview:
			sortByLetter();
			dismissSortPopupwindow();
			break;
			
		case R.id.sort_time_textview:
			sortByTime();
			dismissSortPopupwindow();
			break;
			
		case R.id.sort_usenum_textview:
			sortByUseNum();
			dismissSortPopupwindow();
			break;
			
		default:
			break;
		}
    	
    	if (mPopupWindow != null && mPopupWindow.isShowing()) {
    		mPopupWindow.dismiss();
    	}
        
    }
    
    void sortByUseNum() {
    	initSortData(2);
    }
    
    void sortByTime() {
		initSortData(1);
    }
    
    private void initSortData(int type) {
    	DrawerDatabase db=new DrawerDatabase(mLauncher);
    	boolean sortByUseNum=true;
    	if(type==1) {
    		sortByUseNum=false;
    	}
    	List<SortEntity> sortList=db.getSortList(sortByUseNum);
    	
    	if ( sortList.size() > 0){
	    	UserFolderInfo userFolderInfo = (UserFolderInfo) mLauncher.itemInfo;
	    	
	    	ArrayList<ApplicationInfo> contents = userFolderInfo.contents;
	    
	    	for(int j=0;j<contents.size();j++) {
	    		
	    		list.add(contents.get(j));
	    	}
    	
	    	System.out.println(" contents  size  ----> " + contents.size());
	    	
	    	ArrayList<ApplicationInfo> newAppInfo = new ArrayList<ApplicationInfo>();
			for(int i=0;i<sortList.size();i++) {
				SortEntity entity=sortList.get(i);
				
				for(int j=0;j<list.size();j++) {
		    		ApplicationInfo info = list.get(j);
		    		
		    		if((info.id==entity.id) || (info instanceof ApplicationInfo && ((ApplicationInfo)info).getPackageName().equals(entity.packageName))){
		    			newAppInfo.add(info);
		    			contents.remove(info);
		    		}
			    }
			}
			if ( contents.size() > 0 ){
				for ( int t = 0;t<contents.size();t++){
					newAppInfo.add(contents.get(t));
				}
			}
			userFolderInfo.contents.clear();
			
			for (int n =0;n <newAppInfo.size();n++){
				userFolderInfo.add(newAppInfo.get(n));
				mLauncher.getModel().addOrMoveItemInDatabase(mLauncher, newAppInfo.get(n), userFolderInfo.id, 0, 0, 0);
			}
			
			notifyDataSetChanged();
			
//			View v = mLauncher.mWorkspace.getViewForTag(userFolderInfo);
			
			View v = null;
			
//			if(mLauncher.mAllDrawer.getVisibility()==View.VISIBLE) {
//				v = mLauncher.mAllDrawer.drawerWorkspace.getViewForTag(userFolderInfo);
//			} else {
				v = mLauncher.mWorkspace.getViewForTag(userFolderInfo);
//			}
			
			FolderIcon icon = (FolderIcon) v;
			icon.refresh();
			
			requestLayout();
	    	invalidate();
	    	
	    	list.clear();
    	}
    	
    }
    
   
    
    private List<ApplicationInfo> list=new ArrayList<ApplicationInfo>();
    void sortByLetter() {
    	
    	UserFolderInfo userFolderInfo = (UserFolderInfo) mLauncher.itemInfo;
    	ArrayList<ApplicationInfo> contents = userFolderInfo.contents;
		int contentsCount = contents.size();
		
		for (int k = 0; k < contentsCount; k++) {

			ApplicationInfo app = contents.get(k);
			
			list.add(app);
		}
		
    	Comparator<ApplicationInfo> mComparator=new Comparator<ApplicationInfo>() {
			
			@Override
			public int compare(ApplicationInfo object1, ApplicationInfo object2) {
				
				Collator mCollator = Collator.getInstance(java.util.Locale.CHINA);
				String str1=getTitle(object1);
				String str2=getTitle(object2);
				if (mCollator.compare(str1, str2) > 0) {
					return 1;
				} else if (mCollator.compare(str1, str2) < 0) {
					return -1;
				} else {
					return 0;
				}

			}
		};
		Collections.sort(list, mComparator);
		
		userFolderInfo.contents.clear();
		
		View v = null;
		
//		if(mLauncher.mAllDrawer.getVisibility()==View.VISIBLE) {
//			v = mLauncher.mAllDrawer.drawerWorkspace.getViewForTag(userFolderInfo);
//		} else {
			v = mLauncher.mWorkspace.getViewForTag(userFolderInfo);
//		}
		
		
		for (int i =0;i<list.size();i++){
			
			ApplicationInfo item =  list.get(i);
			userFolderInfo.add(item);
	        mLauncher.getModel().addOrMoveItemInDatabase(mLauncher, item, userFolderInfo.id, 0, 0, 0);
		}
		
		notifyDataSetChanged();
		
		FolderIcon icon = (FolderIcon) v;
		icon.refresh();
		
		v.requestLayout();
		v.invalidate();
		
		list.clear();
    }
    
    private String getTitle(ApplicationInfo info) {
    	if(info instanceof ApplicationInfo) {
    		return ((ApplicationInfo)info).title.toString();
    	}
    	return null;
    }
    
    public boolean onLongClick(View v) {
        mLauncher.closeFolder(this);
        mLauncher.showRenameDialog(mInfo);
        return true;
    }

    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
        if (!view.isInTouchMode()) {
            return false;
        }
        
        contentView = view;
        
        ApplicationInfo app = (ApplicationInfo) parent.getItemAtPosition(position);

        appInfo = app;
        LayoutInflater mLayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);   
        View v = mLayoutInflater.inflate(R.layout.operationpopup, null);  
        
    	v.findViewById(R.id.apply).setVisibility(View.VISIBLE);
    	v.findViewById(R.id.folderly).setVisibility(View.GONE);
    	v.findViewById(R.id.appwidgetly).setVisibility(View.GONE);
    	
        PackageManager mgr = context.getPackageManager();
		ResolveInfo res = mgr.resolveActivity(app.intent, 0);
        	
    	if (mLauncher.filterApp(res)){
			v.findViewById(R.id.uninstall).setVisibility(View.GONE);
		}else{
			v.findViewById(R.id.uninstall).setVisibility(View.VISIBLE);
		}
    	
    	mPopupWindow = new PopupWindow(v, LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);   
        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());
        mPopupWindow.setOutsideTouchable(true);
        
    	appdelete = (LinearLayout) v.findViewById(R.id.appdelete);
        uninstall = (LinearLayout) v.findViewById(R.id.uninstall);
        appinfo = (LinearLayout) v.findViewById(R.id.applictioninfo);
        changeicon = (LinearLayout) v.findViewById(R.id.changeicon);
        apprename = (LinearLayout) v.findViewById(R.id.rename);
        
        appdelete.setOnClickListener(this);
        uninstall.setOnClickListener(this);
        appinfo.setOnClickListener(this);
        changeicon.setOnClickListener(this);
        apprename.setOnClickListener(this);
        
        mPopupWindow.setAnimationStyle(R.style.popupAnimation_down);
        mPopupWindow.showAsDropDown(view);
        
//        CellLayout.CellInfo cellInfo = (CellLayout.CellInfo) view.getTag();
//        
//        System.out.println(" cellINfo   ----- >  " + cellInfo);
//        
//        if (mLauncher.mWorkspace.allowLongPress()) {
        	
//        	mDragger.startDrag(view, this, app, DragController.DRAG_ACTION_MOVE);
//        	mDragItem = app;
//          mLauncher.mWorkspace.setFolderDragInfo(app);
        	
//        	mLauncher.mWorkspace.startDrag(cellInfo);
//        }
        return true;
    }
    
    public void setDragger(DragController dragger) {
        mDragger = dragger;
    }

    public void onDropCompleted(View target, boolean success) {
    }

    /**
     * Sets the adapter used to populate the content area. The adapter must only
     * contains ApplicationInfo items.
     *
     * @param adapter The list of applications to display in the folder.
     */
    void setContentAdapter(BaseAdapter adapter) {
        mContent.setAdapter(adapter);
    }

    void notifyDataSetChanged() {
        ((BaseAdapter) mContent.getAdapter()).notifyDataSetChanged();
    }

    void setLauncher(Launcher launcher) {
        mLauncher = launcher;
    }
    
    /**
     * @return the FolderInfo object associated with this folder
     */
    FolderInfo getInfo() {
        return mInfo;
    }

    // When the folder opens, we need to refresh the GridView's selection by
    // forcing a layout
    void onOpen() {
        mContent.requestLayout();
    }

    void onClose() {
        final Workspace workspace = mLauncher.getWorkspace();
        workspace.getChildAt(workspace.getCurrentScreen()).requestFocus();
    }

    void bind(FolderInfo info) {
        mInfo = info;
//        mCloseButton.setText(info.title);
    }
    
    private void showSortPopupwindow() {
		if(mSortPopupwindow==null) {
			mSortPopupwindow=new PopupWindow(initSortPopupwindow(), LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, true);
			mSortPopupwindow.setOutsideTouchable(true);
			mSortPopupwindow.setBackgroundDrawable(new BitmapDrawable());
		}
		if(!mLauncher.isFinishing() && !mSortPopupwindow.isShowing()) {
			mSortPopupwindow.showAsDropDown(sort, 0, 10);
		}
	}
    
	private View initSortPopupwindow() {
		View mSortView=LayoutInflater.from(context).inflate(R.layout.popupwindow_sort, null);
    	View mSortLetterView=mSortView.findViewById(R.id.sort_letter_textview);
		View mSortTimeView = mSortView.findViewById(R.id.sort_time_textview);
    	View mSortUseNumView=mSortView.findViewById(R.id.sort_usenum_textview);
    	mSortLetterView.setOnClickListener(this);
    	mSortTimeView.setOnClickListener(this);
    	mSortUseNumView.setOnClickListener(this);
    	return mSortView;
	}
	
	private void dismissSortPopupwindow() {
		if(mSortPopupwindow!=null && mSortPopupwindow.isShowing()) {
			mSortPopupwindow.dismiss();
		}
	}
	
	void addAppToFolder(final UserFolderInfo userFolderInfo){
	    	
		LayoutInflater mLayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View view = mLayoutInflater.inflate(R.layout.allappgrid,null);
		folderPopupWindow = new PopupWindow(view, LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT,true);
		folderPopupWindow.setBackgroundDrawable(new BitmapDrawable());
		folderPopupWindow.setOutsideTouchable(true);
		
		folderPopupWindow.setAnimationStyle(R.style.desktopPopupAnimation);
		folderPopupWindow.showAtLocation(addapp, Gravity.CENTER, 0, 0);
		((LinearLayout) view.findViewById(R.id.allappgridly)).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				folderPopupWindow.dismiss();
			}
		});
		
			submit = (Button) view.findViewById(R.id.submit);
			cancel = (Button) view.findViewById(R.id.cancel);
			
			name = (TextView) view.findViewById(R.id.name);
			
			name.setText(userFolderInfo.title);
			
			submit.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					
					notifyDataSetChanged();
					dismissPopupwindow(folderPopupWindow);
					
				}
			});
			
			cancel.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					
					dismissPopupwindow(folderPopupWindow);
					
				}
			});
			
			PackageManager pm = context.getPackageManager();
			
			List<ApplicationInfo>  apps = new ArrayList<ApplicationInfo>();
			for(int i = 0 ; i<mLauncher.sModel.mApplications.size();i++)
	    	{
				apps.add(mLauncher.sModel.mApplications.get(i));
	    	}
			
			final ArrayList<ApplicationInfo> contents = userFolderInfo.contents;
	
			AllAppAdapter allAppAdapter = new AllAppAdapter(context, apps, pm,contents); 
			mLauncher.appGv = (GridView) view.findViewById(R.id.gridview);
			mLauncher.appGv.setAdapter(allAppAdapter);
			mLauncher.appGv.setOnItemClickListener(new OnItemClickListener() {
	
				@Override
				public void onItemClick(AdapterView<?> arg0, View view, int position,
						long arg3) {
					
					CheckBox cb = (CheckBox) view.findViewById(R.id.cb);
					ImageView appImage = (ImageView) view.findViewById(R.id.appimg); 
					ApplicationInfo appInfo = (ApplicationInfo) appImage.getTag();
					
					if ( cb.isChecked()){
						cb.setChecked(false);
					} else {
						cb.setChecked(true);
					}
					
					if ( cb.isChecked()) {
						userFolderInfo.add(appInfo);
						mLauncher.getModel().addOrMoveItemInDatabase(context, appInfo, userFolderInfo.id, mLauncher.mWorkspace.getCurrentScreen(),userFolderInfo.cellX, userFolderInfo.cellY);
					} else {
						
						mLauncher.getModel().removeUserFolderItem(userFolderInfo, appInfo);
						mLauncher.getModel().deleteItemFromDatabase(mLauncher, appInfo);
					}
					
					View v = null;
					
//					if(mLauncher.mAllDrawer.getVisibility()==View.VISIBLE) {
//						v = mLauncher.mAllDrawer.drawerWorkspace.getViewForTag(userFolderInfo);
//					} else {
						v = mLauncher.mWorkspace.getViewForTag(userFolderInfo);
//					}
					
					FolderIcon icon = (FolderIcon) v;
					mLauncher.mCloseIcon = new BitmapDrawable(icon.creaetCloseIcon(userFolderInfo));
					((BubbleTextView)v).setCompoundDrawablesWithIntrinsicBounds(null, mLauncher.mCloseIcon, null, null);
				}
			});
			
	    }
	
	private void dismissPopupwindow(PopupWindow pop) {
		if (pop != null && pop.isShowing()) {
			pop.dismiss();
		}
	}
	    
}
